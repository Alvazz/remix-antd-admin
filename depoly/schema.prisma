generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Department {
  id          Int       @id @default(autoincrement()) @map("id")
  name        String    @map("name")
  description String?   @map("description")
  orderNo     Int?      @map("order_no")
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime? @map("updatedAt")

  User User[]

  parent_department_id Int?         @map("parent_department_id")
  parent               Department?  @relation("x", fields: [parent_department_id], references: [id])
  children             Department[] @relation("x")

  @@map("sys_department")
}

// sys_dictionary
model Dictionary {
  id              Int               @id @default(autoincrement()) @map("id")
  name            String            @map("name")
  code            String            @map("code")
  description     String?           @map("description")
  remark          String?           @map("remark")
  status          Int?              @map("status")
  createdAt       DateTime          @default(now()) @map("createdAt")
  updatedAt       DateTime?         @map("updatedAt")
  DictionaryEntry DictionaryEntry[]

  @@map("sys_dictionary")
}

model DictionaryEntry {
  id      Int     @id @default(autoincrement()) @map("id")
  key     String  @map("key")
  value   String  @map("value")
  orderNo Int?    @map("order_no")
  status  Int     @map("status")
  remark  String? @map("remark")

  createdAt DateTime  @default(now()) @map("createdAt")
  updatedAt DateTime? @map("updatedAt")

  dictionary_id Int        @map("dictionary_id")
  dictionary    Dictionary @relation(fields: [dictionary_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("sys_dictionary_entry")
}

// sys_loginlog
model Loginlog {
  id      Int      @id @default(autoincrement()) @map("id")
  name    String   @map("name")
  ip      String?  @map("ip")
  address String?  @map("address")
  loginAt DateTime @default(now()) @map("login_at")
  system  String?  @map("system")
  browser String?  @map("browser")
  userId  Int

  @@map("sys_loginlog")
}

// sys_menu
model Menu {
  id          Int       @id @default(autoincrement()) @map("id")
  name        String    @map("name")
  type        Int       @map("type")
  description String?   @map("description")
  remark      String?   @map("remark")
  icon        String?   @map("icon")
  path        String?   @map("path")
  path_file   String?   @map("path_file")
  status      Int?      @map("status")
  isShow      Int?      @map("isShow")
  isCache     Int?      @map("isCache")
  permission  String?   @map("permission")
  isLink      Int?      @map("isLink")
  orderNo     Int?      @map("order_no")
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime? @map("updatedAt")

  MenuRole MenuRole[]

  parent_menu_id Int?  @map("parent_menu_id")
  parent_menu    Menu? @relation("ParentMenuToChildMenus", fields: [parent_menu_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  children_menu Menu[] @relation("ParentMenuToChildMenus")

  @@map("sys_menu")
}

// sys_menu_role
model MenuRole {
  id        Int       @id @default(autoincrement()) @map("id")
  roleId    Int       @map("role_id")
  menuId    Int       @map("menu_id")
  createdAt DateTime  @default(now()) @map("createdAt")
  updatedAt DateTime? @map("updatedAt")
  roles     Role      @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  menus     Menu      @relation(fields: [menuId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("sys_menu_role")
}

// sys_role
model Role {
  id          Int        @id @default(autoincrement()) @map("id")
  name        String     @map("name")
  value       String     @map("value")
  description String?    @map("description")
  remark      String?    @map("remark")
  status      Int?       @map("status")
  createdAt   DateTime   @default(now()) @map("createdAt")
  updatedAt   DateTime?  @map("updatedAt")
  MenuRole    MenuRole[]
  UserRole    UserRole[]

  @@map("sys_role")
}

// User
model User {
  id        Int       @id @default(autoincrement()) @map("id")
  avatar    String?   @map("avatar")
  email     String?   @map("email")
  name      String    @map("name")
  nickname  String?   @map("nickname")
  password  String    @map("password")
  lang      String    @default("en-US") @map("lang")
  theme     String    @default("light") @map("theme")
  phone     String?   @map("phone")
  remark    String?   @map("remark")
  status    Int?      @map("status")
  createdAt DateTime  @default(now()) @map("createdAt")
  updatedAt DateTime? @map("updatedAt")

  departmentId Int?        @map("department_id")
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  UserRole     UserRole[]

  @@map("sys_user")
}

// sys_user_role
model UserRole {
  id        Int       @id @default(autoincrement()) @map("id")
  userId    Int       @map("user_id")
  roleId    Int       @map("role_id")
  createdAt DateTime  @default(now()) @map("createdAt")
  updatedAt DateTime? @map("updatedAt")
  users     User      @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  roles     Role      @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("sys_user_role")
}

// tools_storage
model Storage {
  id        Int       @id @default(autoincrement()) @map("id")
  createdAt DateTime  @default(now()) @map("createdAt")
  updatedAt DateTime? @map("updatedAt")

  userId   Int    @map("user_id") // 上传用户
  name     String // 文件名
  fileName String @map("file_name") // 真实文件名
  extName  String @map("ext_name") // 文件扩展名
  path     String // 文件地址
  size     String // 文件大小
  type     String // 文件类型

  @@map("tools_storage")
}

model Link {
  id          Int     @id @default(autoincrement())
  name        String
  url         String
  description String?

  categoryId Int          @map("category_id")
  category   LinkCategory @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("profile_link")
}

model LinkCategory {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  userId Int @map("user_id") // 上传用户

  links Link[]

  @@map("profile_link_category")
}

model News {
  id          Int          @id @default(autoincrement())
  title       String
  content     String
  author      String?
  source      String?
  viewCount   Int          @default(0)
  publishedAt DateTime
  newsId      Int          @map("news_id")
  news        NewsCategory @relation(fields: [newsId], references: [id])
  userId      Int          @map("user_id") // 上传用户

  @@map("news")
}

model NewsCategory {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  userId      Int     @map("user_id") // 上传用户

  news News[]

  @@map("news_category")
}

model Blog {
  id          Int          @id @default(autoincrement())
  title       String
  content     String
  author      String?
  source      String?
  viewCount   Int          @default(0)
  publishedAt DateTime
  categoryId  Int          @map("category_id")
  categories  BlogCategory @relation(fields: [categoryId], references: [id])
  tagId       Int          @map("tag_id")
  tags        BlogTag      @relation(fields: [tagId], references: [id])
  userId      Int          @map("user_id") // 上传用户

  @@map("blog")
}

model BlogCategory {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  userId      Int     @map("user_id") // 上传用户

  blog Blog[]

  @@map("blog_category")
}

model BlogTag {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  userId      Int     @map("user_id") // 上传用户

  blog Blog[]

  @@map("blog_tag")
}

model Mail {
  id      Int     @id @default(autoincrement())
  name    String?
  title   String?
  host    String?
  port    Int?
  user    String?
  pass    String?
  from    String?
  to      String?
  subject String?
  content String?
  html    String?
  text    String?

  @@map("mail")
}

model UserSignLog {
  id        Int       @id @default(autoincrement())
  userId    Int // 签到用户 id
  signType  Int       @map("sign_type") // 签到类型：1: 签到 2: 补签
  signTime  DateTime  @map("sign_time") // 签到时间
  createdAt DateTime  @default(now()) // 数据创建时间
  updatedAt DateTime? // 数据更新时间

  @@map("user_sign_log")
}

model UserSign {
  id                   Int @id @default(autoincrement())
  userId               Int // 签到用户 id
  resignNums           Int @map("resign_nums") // 剩余补签数量
  signedNums           Int @map("signed_nums") // 已签到数量
  continuitySignedNums Int @map("continuity_signed_nums") // 已连续签到数据量

  @@map("user_sign")
}

model FeedBack {
  id        Int       @id @default(autoincrement())
  userId    Int // 签到用户 id
  content   String
  url       String? // 反馈图片地址
  createdAt DateTime  @default(now()) // 数据创建时间
  updatedAt DateTime? // 数据更新时间

  @@map("feed_back")
}

model ChangeLog {
  id              Int       @id @default(autoincrement())
  userId          Int // 签到用户 id
  publish_name    String // 发布人
  publish_version String // 发布版本
  publish_time    DateTime // 发布时间
  type            Int // 1. 大版本更新，2. 功能更新 3. 修复 bug
  content         String
  url             String // 更新地址
  createdAt       DateTime  @default(now()) // 数据创建时间
  updatedAt       DateTime? // 数据更新时间

  @@map("change_log")
}
